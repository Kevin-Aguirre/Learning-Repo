{"ast":null,"code":"var _jsxFileName = \"/home/kevin/Random-Code/react-learning/meme-generator/src/components/Meme.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport memesData from \"../memesData.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Meme() {\n  _s();\n  /**\n   * Challenge: Get a random image from the `memesData` array\n   * when the \"new meme image\" button is clicked.\n   * \n   * Log the URL of the image to the console. (Don't worry\n   * about displaying the image yet)\n   */\n\n  const [meme, setMeme] = React.useState({\n    topText: \"\",\n    bottomText: \"\",\n    randomImage: \"https://i.imgflip.com/30b1gx.jpg\"\n  });\n  const [allMemeImages, setAllMemeImages] = React.useState(memesData);\n  function handleOnChange(event) {\n    const {\n      topText,\n      bottomText\n    } = event.setMeme();\n  }\n  function getImage() {\n    const memesArray = allMemeImages.data.memes;\n    const randomNumber = Math.floor(Math.random() * memesArray.length);\n    const url = memesArray[randomNumber].url;\n    setMeme(prevMeme => ({\n      ...prevMeme,\n      randomImage: url\n    }));\n  }\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Top text\",\n        className: \"form--input\",\n        name: \"topText\",\n        value: meme.topText,\n        onChange: handleOnChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Bottom text\",\n        className: \"form--input\",\n        name: \"bottomText\",\n        value: meme.bottomText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"form--button\",\n        onClick: getImage,\n        children: \"Get a new meme image \\uD83D\\uDDBC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"meme\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: meme.randomImage,\n        className: \"meme--image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"meme--text top\",\n        children: meme.topText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"meme--text bottom\",\n        children: meme.bottomText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n_s(Meme, \"OMLbNDdv5oDogwz4FZT5eD1QNok=\");\n_c = Meme;\nvar _c;\n$RefreshReg$(_c, \"Meme\");","map":{"version":3,"names":["React","memesData","jsxDEV","_jsxDEV","Meme","_s","meme","setMeme","useState","topText","bottomText","randomImage","allMemeImages","setAllMemeImages","handleOnChange","event","getImage","memesArray","data","memes","randomNumber","Math","floor","random","length","url","prevMeme","children","className","type","placeholder","name","value","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","_c","$RefreshReg$"],"sources":["/home/kevin/Random-Code/react-learning/meme-generator/src/components/Meme.js"],"sourcesContent":["import React from \"react\"\nimport memesData from \"../memesData.js\"\n\nexport default function Meme() {\n    /**\n     * Challenge: Get a random image from the `memesData` array\n     * when the \"new meme image\" button is clicked.\n     * \n     * Log the URL of the image to the console. (Don't worry\n     * about displaying the image yet)\n     */\n\n    const [meme, setMeme] = React.useState({\n        topText: \"\",\n        bottomText: \"\", \n        randomImage: \"https://i.imgflip.com/30b1gx.jpg\"\n    })\n\n\n    const [allMemeImages, setAllMemeImages] = React.useState(memesData)\n\n    function handleOnChange(event) {\n        const {topText, bottomText} = event.\n        setMeme()\n    }\n\n    function getImage() {\n        const memesArray = allMemeImages.data.memes\n        const randomNumber = Math.floor(Math.random() * memesArray.length)\n        const url = memesArray[randomNumber].url\n        setMeme(prevMeme => ({\n            ...prevMeme,\n            randomImage : url\n        }))\n    }\n    return (\n        <main>\n            <div className=\"form\">\n                <input \n                    type=\"text\"\n                    placeholder=\"Top text\"\n                    className=\"form--input\"\n                    name=\"topText\"\n                    value={meme.topText}\n                    onChange={handleOnChange}\n                />\n                <input \n                    type=\"text\"\n                    placeholder=\"Bottom text\"\n                    className=\"form--input\"\n                    name=\"bottomText\"\n                    value={meme.bottomText}\n                />\n                <button \n                    className=\"form--button\"\n                    onClick={getImage}\n                >\n                    Get a new meme image ðŸ–¼\n                </button>\n            </div>\n            <div className=\"meme\">\n                <img src={meme.randomImage} className=\"meme--image\"></img>\n                <h2 className=\"meme--text top\">{meme.topText}</h2>\n                <h2 className=\"meme--text bottom\">{meme.bottomText}</h2>\n            </div>\n        </main>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}